---
title: Prove who they are with a text message
description: Identifying users when they sign in
section: Patterns
theme: Help users to…
aliases: 2FA
backlog_issue_id: 25
layout: layout-pane.njk
---

{% from "_example.njk" import example %}

Use this pattern to allow users to prove who they are by entering a security code sent to their mobile phone.

{{ example({group: "patterns", item: "security-code", example: "default", html: true, nunjucks: true, open: false}) }}

## When to use this pattern

This pattern is one way to make user accounts in your service more secure.

You can ask users to prove who they are when the user needs to sign in or complete a higher-risk task, such as changing a password.

Requiring users to enter a security code sent to their mobile phone provides a second layer of security over a [password](/patterns/passwords/).

You can require a security code on every sign in or only once per device, depending upon the risk of your service.

## How it works

Send and ask the user for the security code when they create an account and when they sign in later.

### When creating an account

When the user creates an account, ask for their password and mobile phone number at the same time. Make it clear if the mobile number will only be used for sending security codes, or if you will also use it for other purposes.

After saving user’s password and mobile phone number, verify their mobile phone number by sending them a text message with a 4 digit code in this format:

{% from "govuk/components/inset-text/macro.njk" import govukInsetText %}
{{ govukInsetText({
  text: "1234 is your [service name] security code"
}) }}

Then ask the user to enter this code:

{{ example({group: "patterns", item: "security-code", example: "default", html: true, nunjucks: true, open: false}) }}

Help the user enter the code by ignoring any formatting or punctuation that might get added in such as spaces, hyphens and dashes.

There should be a time limit of 15 minutes for users to enter the code. If this time limit expires, display the ‘code has expired’ error message and send the user a new code.

If the user follows the ‘Not received a text message?’ link, allow them to check which mobile number they entered, and to change it if necessary. This prevents the user becoming stuck if they entered a mobile number incorrectly.

{{ example({group: "patterns", item: "security-code", example: "resend-first-time", html: true, nunjucks: true, open: false}) }}

This should send a new code, with its own 15 minute expiry window. However the previous code should remain valid within its own expiry time.

### When signing in

When a user returns to your service, verify their password first. Once they have successfully entered this, send a text message to their mobile phone with a 4 digit code in this format:

{% from "govuk/components/inset-text/macro.njk" import govukInsetText %}
{{ govukInsetText({
  text: "1234 is your [service name] security code"
}) }}

Ask the user to enter this code. Use the same pattern and time limit as when creating an account.

If they follow the ‘Not received a text message?’ link, show them this page allowing them to resend the code, but do not reveal the mobile number it was sent to:

{{ example({group: "patterns", item: "security-code", example: "resend", html: true, nunjucks: true, open: false}) }}

You should advise users what to do if they no longer have access to their phone.

Depending upon your service, they may need to contact a support address, or may be able to ask a colleague to update their phone number.

### Domain-bound codes

You can also follow the emerging [domain-bound codes](https://developer.apple.com/news/?id=z0i801mg) standard, and include the domain of the service on a new line, prefixed with an `@`, followed by a `#` symbol and the code, like this:

{{ govukInsetText({
html: "1234 is your [service name] security code<br><br>@example.com #1234"
}) }}

This improves security by associating the code with a specific domain, allowing browsers to safely autofill it.

### Error messages

Error messages should be styled like this:

{{ example({group: "patterns", item: "security-code", example: "error-incorrect", html: true, nunjucks: true, open: false}) }}

If the user doesn’t enter enough digits:

Say ‘You haven’t entered enough numbers’.

If the user enters too many digits:

Say ‘You’ve entered too many numbers’.

If the user enters non-numeric characters, other than spaces:

Say ‘The code must be 4 numbers’.

If the code has expired, show this message:

{{ example({group: "patterns", item: "security-code", example: "error-expired", html: true, nunjucks: true, open: false}) }}

### Technical security measures

You should implement [technical measures to prevent automated attacks](https://www.ncsc.gov.uk/collection/passwords/updating-your-approach#tip2-password-collection), such as introducing a time delay after 10 incorrect number entries.

You should also set up monitoring for potentially malicious behaviour, such as activity from unexpected geographical areas.

## Research on this pattern

[Read the National Cyber Security Centre’s guidance on multi-factor authentication](https://www.ncsc.gov.uk/guidance/multi-factor-authentication-online-services)

### Services using this pattern

This pattern has been used in a number of services, including the following:

**Government Digital Service**<br>
GOV.UK Notify<br>
GOV.UK Pay

**Department for Work and Pensions**<br>
DWP Authenticate

**Home Office**<br>
EU Settlement Service

**Office for Product Safety and Standards**<br>
Product Safety Database

### Next steps

More research is needed into whether it is useful to partially show the user the phone number that the security code was sent to.

If you’ve used this pattern, get in touch to share your user research findings.
